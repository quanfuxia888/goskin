// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"quanfuxia/internal/model/gens"
)

func newWaUser(db *gorm.DB, opts ...gen.DOOption) waUser {
	_waUser := waUser{}

	_waUser.waUserDo.UseDB(db, opts...)
	_waUser.waUserDo.UseModel(&gens.WaUser{})

	tableName := _waUser.waUserDo.TableName()
	_waUser.ALL = field.NewAsterisk(tableName)
	_waUser.ID = field.NewInt32(tableName, "id")
	_waUser.Username = field.NewString(tableName, "username")
	_waUser.Nickname = field.NewString(tableName, "nickname")
	_waUser.Password = field.NewString(tableName, "password")
	_waUser.Sex = field.NewString(tableName, "sex")
	_waUser.Avatar = field.NewString(tableName, "avatar")
	_waUser.Email = field.NewString(tableName, "email")
	_waUser.Mobile = field.NewString(tableName, "mobile")
	_waUser.Level = field.NewInt32(tableName, "level")
	_waUser.Birthday = field.NewTime(tableName, "birthday")
	_waUser.Money = field.NewFloat64(tableName, "money")
	_waUser.Score = field.NewInt32(tableName, "score")
	_waUser.LastTime = field.NewTime(tableName, "last_time")
	_waUser.LastIP = field.NewString(tableName, "last_ip")
	_waUser.JoinTime = field.NewTime(tableName, "join_time")
	_waUser.JoinIP = field.NewString(tableName, "join_ip")
	_waUser.Token = field.NewString(tableName, "token")
	_waUser.CreatedAt = field.NewTime(tableName, "created_at")
	_waUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_waUser.Role = field.NewInt32(tableName, "role")
	_waUser.Status = field.NewInt32(tableName, "status")
	_waUser.WxOpenID = field.NewString(tableName, "wx_open_id")

	_waUser.fillFieldMap()

	return _waUser
}

type waUser struct {
	waUserDo waUserDo

	ALL       field.Asterisk
	ID        field.Int32   // 主键
	Username  field.String  // 用户名
	Nickname  field.String  // 昵称
	Password  field.String  // 密码
	Sex       field.String  // 性别
	Avatar    field.String  // 头像
	Email     field.String  // 邮箱
	Mobile    field.String  // 手机
	Level     field.Int32   // 等级
	Birthday  field.Time    // 生日
	Money     field.Float64 // 余额(元)
	Score     field.Int32   // 积分
	LastTime  field.Time    // 登录时间
	LastIP    field.String  // 登录ip
	JoinTime  field.Time    // 注册时间
	JoinIP    field.String  // 注册ip
	Token     field.String  // token
	CreatedAt field.Time    // 创建时间
	UpdatedAt field.Time    // 更新时间
	Role      field.Int32   // 角色
	Status    field.Int32   // 禁用
	WxOpenID  field.String  // 微信openid

	fieldMap map[string]field.Expr
}

func (w waUser) Table(newTableName string) *waUser {
	w.waUserDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w waUser) As(alias string) *waUser {
	w.waUserDo.DO = *(w.waUserDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *waUser) updateTableName(table string) *waUser {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.Username = field.NewString(table, "username")
	w.Nickname = field.NewString(table, "nickname")
	w.Password = field.NewString(table, "password")
	w.Sex = field.NewString(table, "sex")
	w.Avatar = field.NewString(table, "avatar")
	w.Email = field.NewString(table, "email")
	w.Mobile = field.NewString(table, "mobile")
	w.Level = field.NewInt32(table, "level")
	w.Birthday = field.NewTime(table, "birthday")
	w.Money = field.NewFloat64(table, "money")
	w.Score = field.NewInt32(table, "score")
	w.LastTime = field.NewTime(table, "last_time")
	w.LastIP = field.NewString(table, "last_ip")
	w.JoinTime = field.NewTime(table, "join_time")
	w.JoinIP = field.NewString(table, "join_ip")
	w.Token = field.NewString(table, "token")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.Role = field.NewInt32(table, "role")
	w.Status = field.NewInt32(table, "status")
	w.WxOpenID = field.NewString(table, "wx_open_id")

	w.fillFieldMap()

	return w
}

func (w *waUser) WithContext(ctx context.Context) IWaUserDo { return w.waUserDo.WithContext(ctx) }

func (w waUser) TableName() string { return w.waUserDo.TableName() }

func (w waUser) Alias() string { return w.waUserDo.Alias() }

func (w waUser) Columns(cols ...field.Expr) gen.Columns { return w.waUserDo.Columns(cols...) }

func (w *waUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *waUser) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 22)
	w.fieldMap["id"] = w.ID
	w.fieldMap["username"] = w.Username
	w.fieldMap["nickname"] = w.Nickname
	w.fieldMap["password"] = w.Password
	w.fieldMap["sex"] = w.Sex
	w.fieldMap["avatar"] = w.Avatar
	w.fieldMap["email"] = w.Email
	w.fieldMap["mobile"] = w.Mobile
	w.fieldMap["level"] = w.Level
	w.fieldMap["birthday"] = w.Birthday
	w.fieldMap["money"] = w.Money
	w.fieldMap["score"] = w.Score
	w.fieldMap["last_time"] = w.LastTime
	w.fieldMap["last_ip"] = w.LastIP
	w.fieldMap["join_time"] = w.JoinTime
	w.fieldMap["join_ip"] = w.JoinIP
	w.fieldMap["token"] = w.Token
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["role"] = w.Role
	w.fieldMap["status"] = w.Status
	w.fieldMap["wx_open_id"] = w.WxOpenID
}

func (w waUser) clone(db *gorm.DB) waUser {
	w.waUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w waUser) replaceDB(db *gorm.DB) waUser {
	w.waUserDo.ReplaceDB(db)
	return w
}

type waUserDo struct{ gen.DO }

type IWaUserDo interface {
	gen.SubQuery
	Debug() IWaUserDo
	WithContext(ctx context.Context) IWaUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWaUserDo
	WriteDB() IWaUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWaUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWaUserDo
	Not(conds ...gen.Condition) IWaUserDo
	Or(conds ...gen.Condition) IWaUserDo
	Select(conds ...field.Expr) IWaUserDo
	Where(conds ...gen.Condition) IWaUserDo
	Order(conds ...field.Expr) IWaUserDo
	Distinct(cols ...field.Expr) IWaUserDo
	Omit(cols ...field.Expr) IWaUserDo
	Join(table schema.Tabler, on ...field.Expr) IWaUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWaUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWaUserDo
	Group(cols ...field.Expr) IWaUserDo
	Having(conds ...gen.Condition) IWaUserDo
	Limit(limit int) IWaUserDo
	Offset(offset int) IWaUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWaUserDo
	Unscoped() IWaUserDo
	Create(values ...*gens.WaUser) error
	CreateInBatches(values []*gens.WaUser, batchSize int) error
	Save(values ...*gens.WaUser) error
	First() (*gens.WaUser, error)
	Take() (*gens.WaUser, error)
	Last() (*gens.WaUser, error)
	Find() ([]*gens.WaUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gens.WaUser, err error)
	FindInBatches(result *[]*gens.WaUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*gens.WaUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWaUserDo
	Assign(attrs ...field.AssignExpr) IWaUserDo
	Joins(fields ...field.RelationField) IWaUserDo
	Preload(fields ...field.RelationField) IWaUserDo
	FirstOrInit() (*gens.WaUser, error)
	FirstOrCreate() (*gens.WaUser, error)
	FindByPage(offset int, limit int) (result []*gens.WaUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWaUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w waUserDo) Debug() IWaUserDo {
	return w.withDO(w.DO.Debug())
}

func (w waUserDo) WithContext(ctx context.Context) IWaUserDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w waUserDo) ReadDB() IWaUserDo {
	return w.Clauses(dbresolver.Read)
}

func (w waUserDo) WriteDB() IWaUserDo {
	return w.Clauses(dbresolver.Write)
}

func (w waUserDo) Session(config *gorm.Session) IWaUserDo {
	return w.withDO(w.DO.Session(config))
}

func (w waUserDo) Clauses(conds ...clause.Expression) IWaUserDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w waUserDo) Returning(value interface{}, columns ...string) IWaUserDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w waUserDo) Not(conds ...gen.Condition) IWaUserDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w waUserDo) Or(conds ...gen.Condition) IWaUserDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w waUserDo) Select(conds ...field.Expr) IWaUserDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w waUserDo) Where(conds ...gen.Condition) IWaUserDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w waUserDo) Order(conds ...field.Expr) IWaUserDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w waUserDo) Distinct(cols ...field.Expr) IWaUserDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w waUserDo) Omit(cols ...field.Expr) IWaUserDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w waUserDo) Join(table schema.Tabler, on ...field.Expr) IWaUserDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w waUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWaUserDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w waUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IWaUserDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w waUserDo) Group(cols ...field.Expr) IWaUserDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w waUserDo) Having(conds ...gen.Condition) IWaUserDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w waUserDo) Limit(limit int) IWaUserDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w waUserDo) Offset(offset int) IWaUserDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w waUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWaUserDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w waUserDo) Unscoped() IWaUserDo {
	return w.withDO(w.DO.Unscoped())
}

func (w waUserDo) Create(values ...*gens.WaUser) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w waUserDo) CreateInBatches(values []*gens.WaUser, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w waUserDo) Save(values ...*gens.WaUser) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w waUserDo) First() (*gens.WaUser, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gens.WaUser), nil
	}
}

func (w waUserDo) Take() (*gens.WaUser, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gens.WaUser), nil
	}
}

func (w waUserDo) Last() (*gens.WaUser, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gens.WaUser), nil
	}
}

func (w waUserDo) Find() ([]*gens.WaUser, error) {
	result, err := w.DO.Find()
	return result.([]*gens.WaUser), err
}

func (w waUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gens.WaUser, err error) {
	buf := make([]*gens.WaUser, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w waUserDo) FindInBatches(result *[]*gens.WaUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w waUserDo) Attrs(attrs ...field.AssignExpr) IWaUserDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w waUserDo) Assign(attrs ...field.AssignExpr) IWaUserDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w waUserDo) Joins(fields ...field.RelationField) IWaUserDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w waUserDo) Preload(fields ...field.RelationField) IWaUserDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w waUserDo) FirstOrInit() (*gens.WaUser, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gens.WaUser), nil
	}
}

func (w waUserDo) FirstOrCreate() (*gens.WaUser, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gens.WaUser), nil
	}
}

func (w waUserDo) FindByPage(offset int, limit int) (result []*gens.WaUser, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w waUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w waUserDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w waUserDo) Delete(models ...*gens.WaUser) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *waUserDo) withDO(do gen.Dao) *waUserDo {
	w.DO = *do.(*gen.DO)
	return w
}
